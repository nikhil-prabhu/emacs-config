# -*- mode: org; coding: utf-8; -*-
#+STARTUP: indent
#+TITLE: Nikhil Prabhu's Custom Emacs Configuration
#+AUTHOR: Nikhil Prabhu
#+EMAIL: nikhilprabhu00@gmail.com

* Initial Settings

# This section contains settings that generally modify the overall
# look and feel of Emacs, and other miscellaneous settings.

** Emacs Settings
   
*** User information

#+BEGIN_SRC emacs-lisp

   (setq user-full-name "Nikhil Prabhu")
   (setq user-mail-address "nikhilprabhu00@gmail.com")

#+END_SRC

*** User interface settings


**** Always start Emacs maximized

#+BEGIN_SRC emacs-lisp

  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+END_SRC

**** Word wrap

#+BEGIN_SRC emacs-lisp

  (global-visual-line-mode t)

#+END_SRC

**** Highlight lines

#+BEGIN_SRC emacs-lisp

  (global-hl-line-mode t)

#+END_SRC

**** Disable scrollbar

#+BEGIN_SRC emacs-lisp

  (scroll-bar-mode -1)

#+END_SRC

**** Disable toolbar

#+BEGIN_SRC emacs-lisp

  (tool-bar-mode -1)

#+END_SRC

**** Disable menubar

#+BEGIN_SRC emacs-lisp

  (menu-bar-mode -1)

#+END_SRC

**** Disable ring bell

#+BEGIN_SRC emacs-lisp

  (setq ring-bell-function 'ignore)

#+END_SRC

**** Prettify symbols

#+BEGIN_SRC emacs-lisp

  (add-hook 'after-init-hook #'global-prettify-symbols-mode)

#+END_SRC

**** Line numbers for programming languages and Org

#+BEGIN_SRC emacs-lisp

  (when (version<= "26.0.50" emacs-version)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    (add-hook 'org-mode-hook 'display-line-numbers-mode))

#+END_SRC

**** Pair matching

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC

**** Custom frame title format

#+BEGIN_SRC emacs-lisp
  (setq-default frame-title-format '("%b [%m] - GNU Emacs"))
#+END_SRC

*** Major mode settings

**** Use cperl-mode for Perl scripts

#+BEGIN_SRC emacs-lisp
       (defalias 'perl-mode 'cperl-mode)
#+END_SRC
     
* Custom Functions

# This section contains custom functions that either adds new
# functionality, or improves upon existing functionality

** Revert buffer without confirmation

#+BEGIN_SRC emacs-lisp
  (defun revert-buffer-no-confirm ()
    ;; Revert (reload) current buffer without confirmation
    (interactive)
    (if (bound-and-true-p display-line-numbers-mode)
        (progn
          (revert-buffer :ignore-auto :noconfirm)
          (display-line-numbers-mode)
          (message (concat "Buffer " (buffer-name) " reloaded.")))
      (progn
        (revert-buffer :ignore-auto :noconfirm)
        (message (concat "Buffer " (buffer-name) " reloaded.")))))
#+END_SRC

* Custom Keybindings

# This section contains custom keybindings

** Revert buffer without confirmation

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c r") 'revert-buffer-no-confirm)
#+END_SRC

** Open a shell buffer

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x s") 'shell)
#+END_SRC

** Clear shell buffer

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'comint-clear-buffer)
#+END_SRC

** Display line numbers

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x n") 'display-line-numbers-mode)
#+END_SRC

* Packages

# This section contains packages from external sources

** auto-package-update

#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :if (not (daemonp))
    :custom
    (auto-package-update-interval 7) ;; in days
    (auto-package-update-prompt-before-update t)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
#+END_SRC

** evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init (setq evil-want-keybinding nil)
    :config (evil-mode t))
#+END_SRC

** doom-themes

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-Iosvkem t)
    (setq ring-bell-function 'doom-themes-visual-bell-fn)
    (setq doom-themes-treemacs-theme "doom-colors")
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+END_SRC

** doom-modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    (setq inhibit-compacting-font-caches t)
    (setq doom-modeline-buffer-file-name-style 'buffer-name)
    (setq doom-modeline-modal-icon nil))
#+END_SRC

** org-bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** forge

#+BEGIN_SRC emacs-lisp
  (use-package forge
    :ensure t)
#+END_SRC

** diff-hl

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :config (global-diff-hl-mode t))
#+END_SRC

** company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook #'global-company-mode)
    :config (setq company-idle-delay 0))
#+END_SRC

** company-box

#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

** rainbow-delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode-enable)))
#+END_SRC

** treemacs

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :bind ("C-x t" . 'treemacs))
#+END_SRC

** lsp-mode

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook (prog-mode . lsp))
#+END_SRC

** lsp-ui

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :bind(
          ("C-c i" . lsp-ui-imenu)))
#+END_SRC

** company-lsp

#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :ensure t)
#+END_SRC

** web-mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode)))
#+END_SRC

** emmet-mode

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :hook (web-mode . emmet-mode))
#+END_SRC

** highlight-indent-guides

#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive 'top)
    (setq highlight-indent-guides-delay 0)
    :hook (prog-mode . highlight-indent-guides-mode))
#+END_SRC

** ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :config (ivy-mode t))
#+END_SRC

** counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :after ivy
    :demand t
    :bind
    (("C-c C-r" . ivy-resume)
     ("C-x b" . ivy-switch-buffer)
     ("C-x C-f" . counsel-find-file)
     ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("M-x" . counsel-M-x)
     :map counsel-find-file-map
     ("<left>" . counsel-up-directory)))
#+END_SRC

** ivy-rich

#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :ensure t
    :after (ivy counsel)

    :preface
    (eval-when-compile
      (defvar ivy-rich-path-style)
      (declare-function ivy-rich-mode nil))

    :init
    (setq ivy-rich-path-style 'abbrev)

    :config
    (ivy-rich-mode t))
#+END_SRC

** ctrlf

#+BEGIN_SRC emacs-lisp
  (use-package ctrlf
    :ensure t
    :init (ctrlf-mode +1))
#+END_SRC

** all-the-icons-ivy-rich

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))
#+END_SRC

** ace-window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("M-o" . ace-window))
#+END_SRC

** solaire-mode

#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :ensure t
    :hook
    ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    (minibuffer-setup . solaire-mode-in-minibuffer)
    :config
    (setq solaire-mode-remap-fringe -1)
    (solaire-global-mode +1))
#+END_SRC

** dashboard

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-banner-logo-title "Hi, Nikhil. Welcome to Emacs!")
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-page-separator "\n\n\n\n")
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5))))
#+END_SRC

** all-the-icons-dired

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** smex

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize))
#+END_SRC

** yaml-mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :init (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

** projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-mode +1)
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC

** ox-twbs

#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC

** elpy

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

** blacken

#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :ensure t
    :hook (python-mode . blacken-mode))
#+END_SRC

** select-themes

#+BEGIN_SRC emacs-lisp
  (use-package select-themes
    :ensure t)
#+END_SRC
** browse-kill-ring

#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :bind("C-c y" . browse-kill-ring))
#+END_SRC
** org-journal

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t)
#+END_SRC
* Miscellaneous
** Beautify org-mode

*Credits*: https://zzamboni.org/post/beautifying-org-mode-in-emacs/ (With a few modifications)

#+BEGIN_SRC emacs-lisp

  ;; Don't display emphasis markers
  (setq org-hide-emphasis-markers t)

  ;; Font lock bullets
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Font configuration
  (let* ((variable-tuple
          (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
                ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    ;; Headings and titles
    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

  ;; Font configuration for other Org elements
  (custom-theme-set-faces
   'user
   '(fixed-pitch ((t ( :family "Fira Code Retina" :height 120)))))

  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

#+END_SRC

